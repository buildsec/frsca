// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/kyverno/kyverno/api/kyverno/v1

package v1

import apiextv1 "k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1"

// FailurePolicyType specifies a failure policy that defines how unrecognized errors from the admission endpoint are handled.
// +kubebuilder:validation:Enum=Ignore;Fail
#FailurePolicyType: string // #enumFailurePolicyType

#enumFailurePolicyType:
	#Ignore |
	#Fail

// Ignore means that an error calling the webhook is ignored.
#Ignore: #FailurePolicyType & "Ignore"

// Fail means that an error calling the webhook causes the admission to fail.
#Fail: #FailurePolicyType & "Fail"

// AnyAllConditions consists of conditions wrapped denoting a logical criteria to be fulfilled.
// AnyConditions get fulfilled when at least one of its sub-conditions passes.
// AllConditions get fulfilled only when all of its sub-conditions pass.
#AnyAllConditions: {
	// AnyConditions enable variable-based conditional rule execution. This is useful for
	// finer control of when an rule is applied. A condition can reference object data
	// using JMESPath notation.
	// Here, at least one of the conditions need to pass
	// +optional
	any?: [...#Condition] @go(AnyConditions,[]Condition)

	// AllConditions enable variable-based conditional rule execution. This is useful for
	// finer control of when an rule is applied. A condition can reference object data
	// using JMESPath notation.
	// Here, all of the conditions need to pass
	// +optional
	all?: [...#Condition] @go(AllConditions,[]Condition)
}

// ContextEntry adds variables and data sources to a rule Context. Either a
// ConfigMap reference or a APILookup must be provided.
#ContextEntry: {
	// Name is the variable name.
	name?: string @go(Name)

	// ConfigMap is the ConfigMap reference.
	configMap?: null | #ConfigMapReference @go(ConfigMap,*ConfigMapReference)

	// APICall defines an HTTP request to the Kubernetes API server. The JSON
	// data retrieved is stored in the context.
	apiCall?: null | #APICall @go(APICall,*APICall)

	// ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
	// details.
	imageRegistry?: null | #ImageRegistry @go(ImageRegistry,*ImageRegistry)

	// Variable defines an arbitrary JMESPath context variable that can be defined inline.
	variable?: null | #Variable @go(Variable,*Variable)
}

// Variable defines an arbitrary JMESPath context variable that can be defined inline.
#Variable: {
	// Value is any arbitrary JSON object representable in YAML or JSON form.
	// +optional
	value?: null | apiextv1.#JSON @go(Value,*apiextv1.JSON)

	// JMESPath is an optional JMESPath Expression that can be used to
	// transform the variable.
	// +optional
	jmesPath?: string @go(JMESPath)

	// Default is an optional arbitrary JSON object that the variable may take if the JMESPath
	// expression evaluates to nil
	// +optional
	default?: null | apiextv1.#JSON @go(Default,*apiextv1.JSON)
}

// ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
// details.
#ImageRegistry: {
	// Reference is image reference to a container image in the registry.
	// Example: ghcr.io/kyverno/kyverno:latest
	reference: string @go(Reference)

	// JMESPath is an optional JSON Match Expression that can be used to
	// transform the ImageData struct returned as a result of processing
	// the image reference.
	// +optional
	jmesPath?: string @go(JMESPath)
}

// ConfigMapReference refers to a ConfigMap
#ConfigMapReference: {
	// Name is the ConfigMap name.
	name: string @go(Name)

	// Namespace is the ConfigMap namespace.
	namespace?: string @go(Namespace)
}

// APICall defines an HTTP request to the Kubernetes API server. The JSON
// data retrieved is stored in the context. An APICall contains a URLPath
// used to perform the HTTP GET request and an optional JMESPath used to
// transform the retrieved JSON data.
#APICall: {
	// URLPath is the URL path to be used in the HTTP GET request to the
	// Kubernetes API server (e.g. "/api/v1/namespaces" or  "/apis/apps/v1/deployments").
	// The format required is the same format used by the `kubectl get --raw` command.
	urlPath: string @go(URLPath)

	// JMESPath is an optional JSON Match Expression that can be used to
	// transform the JSON response returned from the API server. For example
	// a JMESPath of "items | length(@)" applied to the API server response
	// to the URLPath "/apis/apps/v1/deployments" will return the total count
	// of deployments across all namespaces.
	// +optional
	jmesPath?: string @go(JMESPath)
}

// Condition defines variable-based conditional criteria for rule execution.
#Condition: {
	// Key is the context entry (using JMESPath) for conditional rule evaluation.
	key?: null | apiextv1.#JSON @go(RawKey,*apiextv1.JSON)

	// Operator is the conditional operation to perform. Valid operators are:
	// Equals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals,
	// GreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan,
	// DurationLessThanOrEquals, DurationLessThan
	operator?: #ConditionOperator @go(Operator)

	// Value is the conditional value, or set of values. The values can be fixed set
	// or can be variables declared using JMESPath.
	// +optional
	value?: null | apiextv1.#JSON @go(RawValue,*apiextv1.JSON)
}

// ConditionOperator is the operation performed on condition key and value.
// +kubebuilder:validation:Enum=Equals;NotEquals;In;AnyIn;AllIn;NotIn;AnyNotIn;AllNotIn;GreaterThanOrEquals;GreaterThan;LessThanOrEquals;LessThan;DurationGreaterThanOrEquals;DurationGreaterThan;DurationLessThanOrEquals;DurationLessThan
#ConditionOperator: string

// ResourceFilters is a slice of ResourceFilter
#ResourceFilters: [...#ResourceFilter]

// ResourceFilter allow users to "AND" or "OR" between resources
#ResourceFilter: {
	// UserInfo contains information about the user performing the operation.
	// +optional
	UserInfo?: #UserInfo

	// ResourceDescription contains information about the resource being created or modified.
	resources?: #ResourceDescription @go(ResourceDescription)
}

// Mutation defines how resource are modified.
#Mutation: {
	// Targets defines the target resources to be mutated.
	// +optional
	targets?: [...#ResourceSpec] @go(Targets,[]ResourceSpec)

	// PatchStrategicMerge is a strategic merge patch used to modify resources.
	// See https://kubernetes.io/docs/tasks/manage-kubernetes-objects/update-api-object-kubectl-patch/
	// and https://kubectl.docs.kubernetes.io/references/kustomize/patchesstrategicmerge/.
	// +optional
	patchStrategicMerge?: null | apiextv1.#JSON @go(RawPatchStrategicMerge,*apiextv1.JSON)

	// PatchesJSON6902 is a list of RFC 6902 JSON Patch declarations used to modify resources.
	// See https://tools.ietf.org/html/rfc6902 and https://kubectl.docs.kubernetes.io/references/kustomize/patchesjson6902/.
	// +optional
	patchesJson6902?: string @go(PatchesJSON6902)

	// ForEach applies mutation rules to a list of sub-elements by creating a context for each entry in the list and looping over it to apply the specified logic.
	// +optional
	foreach?: [...#ForEachMutation] @go(ForEachMutation,[]ForEachMutation)
}

// ForEach applies mutation rules to a list of sub-elements by creating a context for each entry in the list and looping over it to apply the specified logic.
#ForEachMutation: {
	// List specifies a JMESPath expression that results in one or more elements
	// to which the validation logic is applied.
	list?: string @go(List)

	// Context defines variables and data sources that can be used during rule execution.
	// +optional
	context?: [...#ContextEntry] @go(Context,[]ContextEntry)

	// AnyAllConditions are used to determine if a policy rule should be applied by evaluating a
	// set of conditions. The declaration can contain nested `any` or `all` statements.
	// See: https://kyverno.io/docs/writing-policies/preconditions/
	// +kubebuilder:validation:XPreserveUnknownFields
	// +optional
	preconditions?: null | #AnyAllConditions @go(AnyAllConditions,*AnyAllConditions)

	// PatchStrategicMerge is a strategic merge patch used to modify resources.
	// See https://kubernetes.io/docs/tasks/manage-kubernetes-objects/update-api-object-kubectl-patch/
	// and https://kubectl.docs.kubernetes.io/references/kustomize/patchesstrategicmerge/.
	// +optional
	patchStrategicMerge?: null | apiextv1.#JSON @go(RawPatchStrategicMerge,*apiextv1.JSON)

	// PatchesJSON6902 is a list of RFC 6902 JSON Patch declarations used to modify resources.
	// See https://tools.ietf.org/html/rfc6902 and https://kubectl.docs.kubernetes.io/references/kustomize/patchesjson6902/.
	// +optional
	patchesJson6902?: string @go(PatchesJSON6902)
}

// Validation defines checks to be performed on matching resources.
#Validation: {
	// Message specifies a custom message to be displayed on failure.
	// +optional
	message?: string @go(Message)

	// ForEach applies validate rules to a list of sub-elements by creating a context for each entry in the list and looping over it to apply the specified logic.
	// +optional
	foreach?: [...#ForEachValidation] @go(ForEachValidation,[]ForEachValidation)

	// Pattern specifies an overlay-style pattern used to check resources.
	// +optional
	pattern?: null | apiextv1.#JSON @go(RawPattern,*apiextv1.JSON)

	// AnyPattern specifies list of validation patterns. At least one of the patterns
	// must be satisfied for the validation rule to succeed.
	// +optional
	anyPattern?: null | apiextv1.#JSON @go(RawAnyPattern,*apiextv1.JSON)

	// Deny defines conditions used to pass or fail a validation rule.
	// +optional
	deny?: null | #Deny @go(Deny,*Deny)
}

// Deny specifies a list of conditions used to pass or fail a validation rule.
#Deny: {
	// Multiple conditions can be declared under an `any` or `all` statement. A direct list
	// of conditions (without `any` or `all` statements) is also supported for backwards compatibility
	// but will be deprecated in the next major release.
	// See: https://kyverno.io/docs/writing-policies/validate/#deny-rules
	conditions?: null | apiextv1.#JSON @go(RawAnyAllConditions,*apiextv1.JSON)
}

// ForEach applies validate rules to a list of sub-elements by creating a context for each entry in the list and looping over it to apply the specified logic.
#ForEachValidation: {
	// List specifies a JMESPath expression that results in one or more elements
	// to which the validation logic is applied.
	list?: string @go(List)

	// ElementScope specifies whether to use the current list element as the scope for validation. Defaults to "true" if not specified.
	// When set to "false", "request.object" is used as the validation scope within the foreach
	// block to allow referencing other elements in the subtree.
	// +optional
	elementScope?: null | bool @go(ElementScope,*bool)

	// Context defines variables and data sources that can be used during rule execution.
	// +optional
	context?: [...#ContextEntry] @go(Context,[]ContextEntry)

	// AnyAllConditions are used to determine if a policy rule should be applied by evaluating a
	// set of conditions. The declaration can contain nested `any` or `all` statements.
	// See: https://kyverno.io/docs/writing-policies/preconditions/
	// +kubebuilder:validation:XPreserveUnknownFields
	// +optional
	preconditions?: null | #AnyAllConditions @go(AnyAllConditions,*AnyAllConditions)

	// Pattern specifies an overlay-style pattern used to check resources.
	// +optional
	pattern?: null | apiextv1.#JSON @go(RawPattern,*apiextv1.JSON)

	// AnyPattern specifies list of validation patterns. At least one of the patterns
	// must be satisfied for the validation rule to succeed.
	// +optional
	anyPattern?: null | apiextv1.#JSON @go(RawAnyPattern,*apiextv1.JSON)

	// Deny defines conditions used to pass or fail a validation rule.
	// +optional
	deny?: null | #Deny @go(Deny,*Deny)
}

// Generation defines how new resources should be created and managed.
#Generation: {
	// ResourceSpec contains information to select the resource.
	ResourceSpec?: #ResourceSpec

	// Synchronize controls if generated resources should be kept in-sync with their source resource.
	// If Synchronize is set to "true" changes to generated resources will be overwritten with resource
	// data from Data or the resource specified in the Clone declaration.
	// Optional. Defaults to "false" if not specified.
	// +optional
	synchronize?: bool @go(Synchronize)

	// Data provides the resource declaration used to populate each generated resource.
	// At most one of Data or Clone must be specified. If neither are provided, the generated
	// resource will be created with default data only.
	// +optional
	data?: null | apiextv1.#JSON @go(RawData,*apiextv1.JSON)

	// Clone specifies the source resource used to populate each generated resource.
	// At most one of Data or Clone can be specified. If neither are provided, the generated
	// resource will be created with default data only.
	// +optional
	clone?: #CloneFrom @go(Clone)
}

// CloneFrom provides the location of the source resource used to generate target resources.
// The resource kind is derived from the match criteria.
#CloneFrom: {
	// Namespace specifies source resource namespace.
	// +optional
	namespace?: string @go(Namespace)

	// Name specifies name of the resource.
	name?: string @go(Name)
}
