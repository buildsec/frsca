// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/kyverno/kyverno/api/kyverno/v1

package v1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apiextensions-apiserver/pkg/apis/apiextensions"
	rbacv1 "k8s.io/api/rbac/v1"
)

// PolicyList is a list of Policy instances.
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
#PolicyList: {
	metav1.#TypeMeta
	metadata: metav1.#ListMeta @go(ListMeta)
	items: [...#Policy] @go(Items,[]Policy)
}

// Policy declares validation, mutation, and generation behaviors for matching resources.
// See: https://kyverno.io/docs/writing-policies/ for more information.
// +genclient
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Background",type="string",JSONPath=".spec.background"
// +kubebuilder:printcolumn:name="Action",type="string",JSONPath=".spec.validationFailureAction"
// +kubebuilder:printcolumn:name="Failure Policy",type="string",JSONPath=".spec.failurePolicy",priority=1
// +kubebuilder:printcolumn:name="Ready",type=string,JSONPath=`.status.ready`
// +kubebuilder:resource:shortName=pol
#Policy: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// Spec defines policy behaviors and contains one or more rules.
	spec: #Spec @go(Spec)

	// Status contains policy runtime information.
	// +optional
	// Deprecated. Policy metrics are available via the metrics endpoint
	status?: #PolicyStatus @go(Status)
}

// Spec contains a list of Rule instances and other policy controls.
#Spec: {
	// Rules is a list of Rule instances. A Policy contains multiple rules and
	// each rule can validate, mutate, or generate resources.
	rules?: [...#Rule] @go(Rules,[]Rule)

	// FailurePolicy defines how unrecognized errors from the admission endpoint are handled.
	// Rules within the same policy share the same failure behavior.
	// Allowed values are Ignore or Fail. Defaults to Fail.
	// +optional
	failurePolicy?: null | #FailurePolicyType @go(FailurePolicy,*FailurePolicyType)

	// ValidationFailureAction controls if a validation policy rule failure should disallow
	// the admission review request (enforce), or allow (audit) the admission review request
	// and report an error in a policy report. Optional. The default value is "audit".
	// +optional
	validationFailureAction?: string @go(ValidationFailureAction)

	// Background controls if rules are applied to existing resources during a background scan.
	// Optional. Default value is "true". The value must be set to "false" if the policy rule
	// uses variables that are only available in the admission review request (e.g. user name).
	// +optional
	background?: null | bool @go(Background,*bool)

	// SchemaValidation skips policy validation checks.
	// Optional. The default value is set to "true", it must be set to "false" to disable the validation checks.
	// +optional
	schemaValidation?: null | bool @go(SchemaValidation,*bool)

	// WebhookTimeoutSeconds specifies the maximum time in seconds allowed to apply this policy.
	// After the configured time expires, the admission request may fail, or may simply ignore the policy results,
	// based on the failure policy. The default timeout is 10s, the value must be between 1 and 30 seconds.
	webhookTimeoutSeconds?: null | int32 @go(WebhookTimeoutSeconds,*int32)
}

// Rule defines a validation, mutation, or generation control for matching resources.
// Each rules contains a match declaration to select resources, and an optional exclude
// declaration to specify which resources to exclude.
#Rule: {
	// Name is a label to identify the rule, It must be unique within the policy.
	// +kubebuilder:validation:MaxLength=63
	name?: string @go(Name)

	// Context defines variables and data sources that can be used during rule execution.
	// +optional
	context?: [...#ContextEntry] @go(Context,[]ContextEntry)

	// MatchResources defines when this policy rule should be applied. The match
	// criteria can include resource information (e.g. kind, name, namespace, labels)
	// and admission review request information like the user name or role.
	// At least one kind is required.
	match?: #MatchResources @go(MatchResources)

	// ExcludeResources defines when this policy rule should not be applied. The exclude
	// criteria can include resource information (e.g. kind, name, namespace, labels)
	// and admission review request information like the name or role.
	// +optional
	exclude?: #ExcludeResources @go(ExcludeResources)

	// Preconditions are used to determine if a policy rule should be applied by evaluating a
	// set of conditions. The declaration can contain nested `any` or `all` statements. A direct list
	// of conditions (without `any` or `all` statements is supported for backwards compatibility but
	// will be deprecated in the next major release.
	// See: https://kyverno.io/docs/writing-policies/preconditions/
	// +kubebuilder:validation:XPreserveUnknownFields
	// +optional
	preconditions?: apiextensions.#JSON @go(AnyAllConditions)

	// Mutation is used to modify matching resources.
	// +optional
	mutate?: #Mutation @go(Mutation)

	// Validation is used to validate matching resources.
	// +optional
	validate?: #Validation @go(Validation)

	// Generation is used to create new resources.
	// +optional
	generate?: #Generation @go(Generation)

	// VerifyImages is used to verify image signatures and mutate them to add a digest
	// +optional
	verifyImages?: [...null | #ImageVerification] @go(VerifyImages,[]*ImageVerification)
}

// FailurePolicyType specifies a failure policy that defines how unrecognized errors from the admission endpoint are handled.
// +kubebuilder:validation:Enum=Ignore;Fail
#FailurePolicyType: string // #enumFailurePolicyType

#enumFailurePolicyType:
	#Ignore |
	#Fail

// Ignore means that an error calling the webhook is ignored.
#Ignore: #FailurePolicyType & "Ignore"

// Fail means that an error calling the webhook causes the admission to fail.
#Fail: #FailurePolicyType & "Fail"

// AnyAllConditions consists of conditions wrapped denoting a logical criteria to be fulfilled.
// AnyConditions get fulfilled when at least one of its sub-conditions passes.
// AllConditions get fulfilled only when all of its sub-conditions pass.
#AnyAllConditions: {
	// AnyConditions enable variable-based conditional rule execution. This is useful for
	// finer control of when an rule is applied. A condition can reference object data
	// using JMESPath notation.
	// Here, at least one of the conditions need to pass
	// +optional
	any?: [...#Condition] @go(AnyConditions,[]Condition)

	// AllConditions enable variable-based conditional rule execution. This is useful for
	// finer control of when an rule is applied. A condition can reference object data
	// using JMESPath notation.
	// Here, all of the conditions need to pass
	// +optional
	all?: [...#Condition] @go(AllConditions,[]Condition)
}

// ContextEntry adds variables and data sources to a rule Context. Either a
// ConfigMap reference or a APILookup must be provided.
#ContextEntry: {
	// Name is the variable name.
	name?: string @go(Name)

	// ConfigMap is the ConfigMap reference.
	configMap?: null | #ConfigMapReference @go(ConfigMap,*ConfigMapReference)

	// APICall defines an HTTP request to the Kubernetes API server. The JSON
	// data retrieved is stored in the context.
	apiCall?: null | #APICall @go(APICall,*APICall)
}

// ConfigMapReference refers to a ConfigMap
#ConfigMapReference: {
	// Name is the ConfigMap name.
	name: string @go(Name)

	// Namespace is the ConfigMap namespace.
	namespace?: string @go(Namespace)
}

// APICall defines an HTTP request to the Kubernetes API server. The JSON
// data retrieved is stored in the context. An APICall contains a URLPath
// used to perform the HTTP GET request and an optional JMESPath used to
// transform the retrieved JSON data.
#APICall: {
	// URLPath is the URL path to be used in the HTTP GET request to the
	// Kubernetes API server (e.g. "/api/v1/namespaces" or  "/apis/apps/v1/deployments").
	// The format required is the same format used by the `kubectl get --raw` command.
	urlPath: string @go(URLPath)

	// JMESPath is an optional JSON Match Expression that can be used to
	// transform the JSON response returned from the API server. For example
	// a JMESPath of "items | length(@)" applied to the API server response
	// to the URLPath "/apis/apps/v1/deployments" will return the total count
	// of deployments across all namespaces.
	// +optional
	jmesPath?: string @go(JMESPath)
}

// Condition defines variable-based conditional criteria for rule execution.
#Condition: {
	// Key is the context entry (using JMESPath) for conditional rule evaluation.
	// +kubebuilder:validation:XPreserveUnknownFields
	key?: apiextensions.#JSON @go(Key)

	// Operator is the operation to perform. Valid operators
	// are Equals, NotEquals, In, AnyIn, AllIn and NotIn, AnyNotIn, AllNotIn.
	operator?: #ConditionOperator @go(Operator)

	// Value is the conditional value, or set of values. The values can be fixed set
	// or can be variables declared using using JMESPath.
	// +kubebuilder:validation:XPreserveUnknownFields
	// +optional
	value?: apiextensions.#JSON @go(Value)
}

// ConditionOperator is the operation performed on condition key and value.
// +kubebuilder:validation:Enum=Equals;NotEquals;In;AnyIn;AllIn;NotIn;AnyNotIn;AllNotIn;GreaterThanOrEquals;GreaterThan;LessThanOrEquals;LessThan;DurationGreaterThanOrEquals;DurationGreaterThan;DurationLessThanOrEquals;DurationLessThan
#ConditionOperator: string // #enumConditionOperator

#enumConditionOperator:
	#Equal |
	#Equals |
	#NotEqual |
	#NotEquals |
	#In |
	#AnyIn |
	#AllIn |
	#NotIn |
	#AnyNotIn |
	#AllNotIn |
	#GreaterThanOrEquals |
	#GreaterThan |
	#LessThanOrEquals |
	#LessThan |
	#DurationGreaterThanOrEquals |
	#DurationGreaterThan |
	#DurationLessThanOrEquals |
	#DurationLessThan

// Equal evaluates if the key is equal to the value.
// Deprecated. Use Equals instead.
#Equal: #ConditionOperator & "Equal"

// Equals evaluates if the key is equal to the value.
#Equals: #ConditionOperator & "Equals"

// NotEqual evaluates if the key is not equal to the value.
// Deprecated. Use NotEquals instead.
#NotEqual: #ConditionOperator & "NotEqual"

// NotEquals evaluates if the key is not equal to the value.
#NotEquals: #ConditionOperator & "NotEquals"

// In evaluates if the key is contained in the set of values.
#In: #ConditionOperator & "In"

// AnyIn evaluates if any of the keys are contained in the set of values.
#AnyIn: #ConditionOperator & "AnyIn"

// AllIn evaluates if all the keys are contained in the set of values.
#AllIn: #ConditionOperator & "AllIn"

// NotIn evaluates if the key is not contained in the set of values.
#NotIn: #ConditionOperator & "NotIn"

// AnyNotIn evaluates if any of the keys are not contained in the set of values.
#AnyNotIn: #ConditionOperator & "AnyNotIn"

// AllNotIn evaluates if all the keys are not contained in the set of values.
#AllNotIn: #ConditionOperator & "AllNotIn"

// GreaterThanOrEquals evaluates if the key (numeric) is greater than or equal to the value (numeric).
#GreaterThanOrEquals: #ConditionOperator & "GreaterThanOrEquals"

// GreaterThan evaluates if the key (numeric) is greater than the value (numeric).
#GreaterThan: #ConditionOperator & "GreaterThan"

// LessThanOrEquals evaluates if the key (numeric) is less than or equal to the value (numeric).
#LessThanOrEquals: #ConditionOperator & "LessThanOrEquals"

// LessThan evaluates if the key (numeric) is less than the value (numeric).
#LessThan: #ConditionOperator & "LessThan"

// DurationGreaterThanOrEquals evaluates if the key (duration) is greater than or equal to the value (duration)
#DurationGreaterThanOrEquals: #ConditionOperator & "DurationGreaterThanOrEquals"

// DurationGreaterThan evaluates if the key (duration) is greater than the value (duration)
#DurationGreaterThan: #ConditionOperator & "DurationGreaterThan"

// DurationLessThanOrEquals evaluates if the key (duration) is less than or equal to the value (duration)
#DurationLessThanOrEquals: #ConditionOperator & "DurationLessThanOrEquals"

// DurationLessThan evaluates if the key (duration) is greater than the value (duration)
#DurationLessThan: #ConditionOperator & "DurationLessThan"

// MatchResources is used to specify resource and admission review request data for
// which a policy rule is applicable.
#MatchResources: {
	// Any allows specifying resources which will be ORed
	// +optional
	any?: #ResourceFilters @go(Any)

	// All allows specifying resources which will be ANDed
	// +optional
	all?: #ResourceFilters @go(All)

	// UserInfo contains information about the user performing the operation.
	// Specifying UserInfo directly under match is being deprecated.
	// Please specify under "any" or "all" instead.
	// +optional
	UserInfo?: #UserInfo

	// ResourceDescription contains information about the resource being created or modified.
	// Requires at least one tag to be specified when under MatchResources.
	// Specifying ResourceDescription directly under match is being deprecated.
	// Please specify under "any" or "all" instead.
	// +optional
	resources?: #ResourceDescription @go(ResourceDescription)
}

// ExcludeResources specifies resource and admission review request data for
// which a policy rule is not applicable.
#ExcludeResources: {
	// Any allows specifying resources which will be ORed
	// +optional
	any?: #ResourceFilters @go(Any)

	// All allows specifying resources which will be ANDed
	// +optional
	all?: #ResourceFilters @go(All)

	// UserInfo contains information about the user performing the operation.
	// Specifying UserInfo directly under exclude is being deprecated.
	// Please specify under "any" or "all" instead.
	// +optional
	UserInfo?: #UserInfo

	// ResourceDescription contains information about the resource being created or modified.
	// Specifying ResourceDescription directly under exclude is being deprecated.
	// Please specify under "any" or "all" instead.
	// +optional
	resources?: #ResourceDescription @go(ResourceDescription)
}

// ResourceFilters is a slice of ResourceFilter
#ResourceFilters: [...#ResourceFilter]

// ResourceFilter allow users to "AND" or "OR" between resources
#ResourceFilter: {
	// UserInfo contains information about the user performing the operation.
	// +optional
	UserInfo?: #UserInfo

	// ResourceDescription contains information about the resource being created or modified.
	resources?: #ResourceDescription @go(ResourceDescription)
}

// UserInfo contains information about the user performing the operation.
#UserInfo: {
	// Roles is the list of namespaced role names for the user.
	// +optional
	roles?: [...string] @go(Roles,[]string)

	// ClusterRoles is the list of cluster-wide role names for the user.
	// +optional
	clusterRoles?: [...string] @go(ClusterRoles,[]string)

	// Subjects is the list of subject names like users, user groups, and service accounts.
	// +optional
	subjects?: [...rbacv1.#Subject] @go(Subjects,[]rbacv1.Subject)
}

// ResourceDescription contains criteria used to match resources.
#ResourceDescription: {
	// Kinds is a list of resource kinds.
	// +optional
	kinds?: [...string] @go(Kinds,[]string)

	// Name is the name of the resource. The name supports wildcard characters
	// "*" (matches zero or many characters) and "?" (at least one character).
	// +optional
	name?: string @go(Name)

	// Names are the names of the resources. Each name supports wildcard characters
	// "*" (matches zero or many characters) and "?" (at least one character).
	// NOTE: "Name" is being deprecated in favor of "Names".
	// +optional
	names?: [...string] @go(Names,[]string)

	// Namespaces is a list of namespaces names. Each name supports wildcard characters
	// "*" (matches zero or many characters) and "?" (at least one character).
	// +optional
	namespaces?: [...string] @go(Namespaces,[]string)

	// Annotations is a  map of annotations (key-value pairs of type string). Annotation keys
	// and values support the wildcard characters "*" (matches zero or many characters) and
	// "?" (matches at least one character).
	// +optional
	annotations?: {[string]: string} @go(Annotations,map[string]string)

	// Selector is a label selector. Label keys and values in `matchLabels` support the wildcard
	// characters `*` (matches zero or many characters) and `?` (matches one character).
	// Wildcards allows writing label selectors like ["storage.k8s.io/*": "*"]. Note that
	// using ["*" : "*"] matches any key and value but does not match an empty label set.
	// +optional
	selector?: null | metav1.#LabelSelector @go(Selector,*metav1.LabelSelector)

	// NamespaceSelector is a label selector for the resource namespace. Label keys and values
	// in `matchLabels` support the wildcard characters `*` (matches zero or many characters)
	// and `?` (matches one character).Wildcards allows writing label selectors like
	// ["storage.k8s.io/*": "*"]. Note that using ["*" : "*"] matches any key and value but
	// does not match an empty label set.
	// +optional
	namespaceSelector?: null | metav1.#LabelSelector @go(NamespaceSelector,*metav1.LabelSelector)
}

// Mutation defines how resource are modified.
#Mutation: {
	// Overlay specifies an overlay pattern to modify resources.
	// DEPRECATED. Use PatchStrategicMerge instead. Scheduled for
	// removal in release 1.5+.
	// +kubebuilder:validation:XPreserveUnknownFields
	// +optional
	overlay?: apiextensions.#JSON @go(Overlay)

	// Patches specifies a RFC 6902 JSON Patch to modify resources.
	// DEPRECATED. Use PatchesJSON6902 instead. Scheduled for
	// removal in release 1.5+.
	// +kubebuilder:validation:XPreserveUnknownFields
	// +nullable
	// +optional
	patches?: [...#Patch] @go(Patches,[]Patch)

	// PatchStrategicMerge is a strategic merge patch used to modify resources.
	// See https://kubernetes.io/docs/tasks/manage-kubernetes-objects/update-api-object-kubectl-patch/
	// and https://kubectl.docs.kubernetes.io/references/kustomize/patchesstrategicmerge/.
	// +kubebuilder:validation:XPreserveUnknownFields
	// +optional
	patchStrategicMerge?: apiextensions.#JSON @go(PatchStrategicMerge)

	// PatchesJSON6902 is a list of RFC 6902 JSON Patch declarations used to modify resources.
	// See https://tools.ietf.org/html/rfc6902 and https://kubectl.docs.kubernetes.io/references/kustomize/patchesjson6902/.
	// +optional
	patchesJson6902?: string @go(PatchesJSON6902)

	// ForEachMutation applies policy rule changes to nested elements.
	// +optional
	foreach?: [...null | #ForEachMutation] @go(ForEachMutation,[]*ForEachMutation)
}

// ForEachMutation applies policy rule changes to nested elements.
#ForEachMutation: {
	// List specifies a JMESPath expression that results in one or more elements
	// to which the validation logic is applied.
	list?: string @go(List)

	// Context defines variables and data sources that can be used during rule execution.
	// +optional
	context?: [...#ContextEntry] @go(Context,[]ContextEntry)

	// AnyAllConditions are used to determine if a policy rule should be applied by evaluating a
	// set of conditions. The declaration can contain nested `any` or `all` statements.
	// See: https://kyverno.io/docs/writing-policies/preconditions/
	// +kubebuilder:validation:XPreserveUnknownFields
	// +optional
	preconditions?: null | #AnyAllConditions @go(AnyAllConditions,*AnyAllConditions)

	// PatchStrategicMerge is a strategic merge patch used to modify resources.
	// See https://kubernetes.io/docs/tasks/manage-kubernetes-objects/update-api-object-kubectl-patch/
	// and https://kubectl.docs.kubernetes.io/references/kustomize/patchesstrategicmerge/.
	// +kubebuilder:validation:XPreserveUnknownFields
	// +optional
	patchStrategicMerge?: apiextensions.#JSON @go(PatchStrategicMerge)
}

// Patch is a RFC 6902 JSON Patch.
// See: https://tools.ietf.org/html/rfc6902
#Patch: {
	// Path specifies path of the resource.
	path?: string @go(Path)

	// Operation specifies operations supported by JSON Patch.
	// i.e:- add, replace and delete.
	op?: string @go(Operation)

	// Value specifies the value to be applied.
	// +kubebuilder:validation:XPreserveUnknownFields
	// +optional
	value?: apiextensions.#JSON @go(Value)
}

// Validation defines checks to be performed on matching resources.
#Validation: {
	// Message specifies a custom message to be displayed on failure.
	// +optional
	message?: string @go(Message)

	// ForEach applies policy rule changes to nested elements.
	// +optional
	foreach?: [...null | #ForEachValidation] @go(ForEachValidation,[]*ForEachValidation)

	// Pattern specifies an overlay-style pattern used to check resources.
	// +kubebuilder:validation:XPreserveUnknownFields
	// +optional
	pattern?: apiextensions.#JSON @go(Pattern)

	// AnyPattern specifies list of validation patterns. At least one of the patterns
	// must be satisfied for the validation rule to succeed.
	// +kubebuilder:validation:XPreserveUnknownFields
	// +optional
	anyPattern?: apiextensions.#JSON @go(AnyPattern)

	// Deny defines conditions used to pass or fail a validation rule.
	// +optional
	deny?: null | #Deny @go(Deny,*Deny)
}

// Deny specifies a list of conditions used to pass or fail a validation rule.
#Deny: {
	// Multiple conditions can be declared under an `any` or `all` statement. A direct list
	// of conditions (without `any` or `all` statements) is also supported for backwards compatibility
	// but will be deprecated in the next major release.
	// See: https://kyverno.io/docs/writing-policies/validate/#deny-rules
	// +kubebuilder:validation:XPreserveUnknownFields
	conditions?: apiextensions.#JSON @go(AnyAllConditions)
}

// ForEachValidation applies policy rule checks to nested elements.
#ForEachValidation: {
	// List specifies a JMESPath expression that results in one or more elements
	// to which the validation logic is applied.
	list?: string @go(List)

	// Context defines variables and data sources that can be used during rule execution.
	// +optional
	context?: [...#ContextEntry] @go(Context,[]ContextEntry)

	// AnyAllConditions are used to determine if a policy rule should be applied by evaluating a
	// set of conditions. The declaration can contain nested `any` or `all` statements.
	// See: https://kyverno.io/docs/writing-policies/preconditions/
	// +kubebuilder:validation:XPreserveUnknownFields
	// +optional
	preconditions?: null | #AnyAllConditions @go(AnyAllConditions,*AnyAllConditions)

	// Pattern specifies an overlay-style pattern used to check resources.
	// +kubebuilder:validation:XPreserveUnknownFields
	// +optional
	pattern?: apiextensions.#JSON @go(Pattern)

	// AnyPattern specifies list of validation patterns. At least one of the patterns
	// must be satisfied for the validation rule to succeed.
	// +kubebuilder:validation:XPreserveUnknownFields
	// +optional
	anyPattern?: apiextensions.#JSON @go(AnyPattern)

	// Deny defines conditions used to pass or fail a validation rule.
	// +optional
	deny?: null | #Deny @go(Deny,*Deny)
}

// ImageVerification validates that images that match the specified pattern
// are signed with the supplied public key. Once the image is verified it is
// mutated to include the SHA digest retrieved during the registration.
#ImageVerification: {
	// Image is the image name consisting of the registry address, repository, image, and tag.
	// Wildcards ('*' and '?') are allowed. See: https://kubernetes.io/docs/concepts/containers/images.
	image?: string @go(Image)

	// Key is the PEM encoded public key that the image or attestation is signed with.
	key?: string @go(Key)

	// Roots is the PEM encoded Root certificate chain used for keyless signing
	roots?: string @go(Roots)

	// Subject is the verified identity used for keyless signing, for example the email address
	subject?: string @go(Subject)

	// Repository is an optional alternate OCI repository to use for image signatures that match this rule.
	// If specified Repository will override the default OCI image repository configured for the installation.
	repository?: string @go(Repository)

	// Attestations are optional checks for signed in-toto Statements used to verify the image.
	// See https://github.com/in-toto/attestation. Kyverno fetches signed attestations from the
	// OCI registry and decodes them into a list of Statement declarations.
	attestations?: [...null | #Attestation] @go(Attestations,[]*Attestation)
}

// Attestation are checks for signed in-toto Statements that are used to verify the image.
// See https://github.com/in-toto/attestation. Kyverno fetches signed attestations from the
// OCI registry and decodes them into a list of Statements.
#Attestation: {
	// PredicateType defines the type of Predicate contained within the Statement.
	predicateType?: string @go(PredicateType)

	// Conditions are used to verify attributes within a Predicate. If no Conditions are specified
	// the attestation check is satisfied as long there are predicates that match the predicate type.
	// +optional
	conditions?: [...null | #AnyAllConditions] @go(Conditions,[]*AnyAllConditions)
}

// Generation defines how new resources should be created and managed.
#Generation: {
	// ResourceSpec contains information to select the resource.
	ResourceSpec?: #ResourceSpec

	// Synchronize controls if generated resources should be kept in-sync with their source resource.
	// If Synchronize is set to "true" changes to generated resources will be overwritten with resource
	// data from Data or the resource specified in the Clone declaration.
	// Optional. Defaults to "false" if not specified.
	// +optional
	synchronize?: bool @go(Synchronize)

	// Data provides the resource declaration used to populate each generated resource.
	// At most one of Data or Clone must be specified. If neither are provided, the generated
	// resource will be created with default data only.
	// +kubebuilder:pruning:PreserveUnknownFields
	// +optional
	data?: apiextensions.#JSON @go(Data)

	// Clone specifies the source resource used to populate each generated resource.
	// At most one of Data or Clone can be specified. If neither are provided, the generated
	// resource will be created with default data only.
	// +optional
	clone?: #CloneFrom @go(Clone)
}

// CloneFrom provides the location of the source resource used to generate target resources.
// The resource kind is derived from the match criteria.
#CloneFrom: {
	// Namespace specifies source resource namespace.
	// +optional
	namespace?: string @go(Namespace)

	// Name specifies name of the resource.
	name?: string @go(Name)
}

// PolicyStatus mostly contains runtime information related to policy execution.
// Deprecated. Policy metrics are now available via the "/metrics" endpoint.
// See: https://kyverno.io/docs/monitoring-kyverno-with-prometheus-metrics/
#PolicyStatus: {
	// Ready indicates if the policy is ready to serve the admission request
	ready: bool @go(Ready)
}

// ResourceSpec contains information to identify a resource.
#ResourceSpec: {
	// APIVersion specifies resource apiVersion.
	// +optional
	apiVersion?: string @go(APIVersion)

	// Kind specifies resource kind.
	kind?: string @go(Kind)

	// Namespace specifies resource namespace.
	// +optional
	namespace?: string @go(Namespace)

	// Name specifies the resource name.
	name?: string @go(Name)
}
