// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/kyverno/kyverno/api/kyverno/v1

package v1

// ValidationFailureAction defines the policy validation failure action
#ValidationFailureAction: string // #enumValidationFailureAction

#enumValidationFailureAction:
	#Enforce |
	#Audit

// Enforce blocks the request on failure
#Enforce: #ValidationFailureAction & "enforce"

// Audit indicates not to block the request on failure, but report failures as policy violations
#Audit: #ValidationFailureAction & "audit"

#ValidationFailureActionOverride: {
	// +kubebuilder:validation:Enum=audit;enforce
	action?: #ValidationFailureAction @go(Action)
	namespaces?: [...string] @go(Namespaces,[]string)
}

// Spec contains a list of Rule instances and other policy controls.
#Spec: {
	// Rules is a list of Rule instances. A Policy contains multiple rules and
	// each rule can validate, mutate, or generate resources.
	rules?: [...#Rule] @go(Rules,[]Rule)

	// FailurePolicy defines how unrecognized errors from the admission endpoint are handled.
	// Rules within the same policy share the same failure behavior.
	// Allowed values are Ignore or Fail. Defaults to Fail.
	// +optional
	failurePolicy?: null | #FailurePolicyType @go(FailurePolicy,*FailurePolicyType)

	// ValidationFailureAction controls if a validation policy rule failure should disallow
	// the admission review request (enforce), or allow (audit) the admission review request
	// and report an error in a policy report. Optional. The default value is "audit".
	// +optional
	// +kubebuilder:validation:Enum=audit;enforce
	validationFailureAction?: #ValidationFailureAction @go(ValidationFailureAction)

	// ValidationFailureActionOverrides is a Cluster Policy attribute that specifies ValidationFailureAction
	// namespace-wise. It overrides ValidationFailureAction for the specified namespaces.
	// +optional
	validationFailureActionOverrides?: [...#ValidationFailureActionOverride] @go(ValidationFailureActionOverrides,[]ValidationFailureActionOverride)

	// Background controls if rules are applied to existing resources during a background scan.
	// Optional. Default value is "true". The value must be set to "false" if the policy rule
	// uses variables that are only available in the admission review request (e.g. user name).
	// +optional
	background?: null | bool @go(Background,*bool)

	// SchemaValidation skips policy validation checks.
	// Optional. The default value is set to "true", it must be set to "false" to disable the validation checks.
	// +optional
	schemaValidation?: null | bool @go(SchemaValidation,*bool)

	// WebhookTimeoutSeconds specifies the maximum time in seconds allowed to apply this policy.
	// After the configured time expires, the admission request may fail, or may simply ignore the policy results,
	// based on the failure policy. The default timeout is 10s, the value must be between 1 and 30 seconds.
	webhookTimeoutSeconds?: null | int32 @go(WebhookTimeoutSeconds,*int32)

	// MutateExistingOnPolicyUpdate controls if a mutateExisting policy is applied on policy events.
	// Default value is "false".
	// +optional
	mutateExistingOnPolicyUpdate?: bool @go(MutateExistingOnPolicyUpdate)

	// GenerateExistingOnPolicyUpdate controls wether to trigger generate rule in existing resources
	// If is set to "true" generate rule will be triggered and applied to existing matched resources.
	// Defaults to "false" if not specified.
	// +optional
	generateExistingOnPolicyUpdate?: bool @go(GenerateExistingOnPolicyUpdate)
}
