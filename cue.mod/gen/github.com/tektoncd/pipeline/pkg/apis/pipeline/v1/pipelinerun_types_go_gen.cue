// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/tektoncd/pipeline/pkg/apis/pipeline/v1

package v1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	duckv1 "knative.dev/pkg/apis/duck/v1"
	"k8s.io/apimachinery/pkg/runtime"
	runv1beta1 "github.com/tektoncd/pipeline/pkg/apis/run/v1beta1"
	"github.com/tektoncd/pipeline/pkg/apis/pipeline/pod"
	corev1 "k8s.io/api/core/v1"
)

// PipelineRun represents a single execution of a Pipeline. PipelineRuns are how
// the graph of Tasks declared in a Pipeline are executed; they specify inputs
// to Pipelines such as parameter values and capture operational aspects of the
// Tasks execution such as service account and tolerations. Creating a
// PipelineRun creates TaskRuns for Tasks in the referenced Pipeline.
//
// +k8s:openapi-gen=true
#PipelineRun: {
	metav1.#TypeMeta

	// +optional
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// +optional
	spec?: #PipelineRunSpec @go(Spec)

	// +optional
	status?: #PipelineRunStatus @go(Status)
}

// PipelineRunSpec defines the desired state of PipelineRun
#PipelineRunSpec: {
	// +optional
	pipelineRef?: null | #PipelineRef @go(PipelineRef,*PipelineRef)

	// Specifying PipelineSpec can be disabled by setting
	// `disable-inline-spec` feature flag..
	// +optional
	pipelineSpec?: null | #PipelineSpec @go(PipelineSpec,*PipelineSpec)

	// Params is a list of parameter names and values.
	// +listType=atomic
	params?: #Params @go(Params)

	// Used for cancelling a pipelinerun (and maybe more later on)
	// +optional
	status?: #PipelineRunSpecStatus @go(Status)

	// Time after which the Pipeline times out.
	// Currently three keys are accepted in the map
	// pipeline, tasks and finally
	// with Timeouts.pipeline >= Timeouts.tasks + Timeouts.finally
	// +optional
	timeouts?: null | #TimeoutFields @go(Timeouts,*TimeoutFields)

	// TaskRunTemplate represent template of taskrun
	// +optional
	taskRunTemplate?: #PipelineTaskRunTemplate @go(TaskRunTemplate)

	// Workspaces holds a set of workspace bindings that must match names
	// with those declared in the pipeline.
	// +optional
	// +listType=atomic
	workspaces?: [...#WorkspaceBinding] @go(Workspaces,[]WorkspaceBinding)

	// TaskRunSpecs holds a set of runtime specs
	// +optional
	// +listType=atomic
	taskRunSpecs?: [...#PipelineTaskRunSpec] @go(TaskRunSpecs,[]PipelineTaskRunSpec)
}

// TimeoutFields allows granular specification of pipeline, task, and finally timeouts
#TimeoutFields: {
	// Pipeline sets the maximum allowed duration for execution of the entire pipeline. The sum of individual timeouts for tasks and finally must not exceed this value.
	pipeline?: null | metav1.#Duration @go(Pipeline,*metav1.Duration)

	// Tasks sets the maximum allowed duration of this pipeline's tasks
	tasks?: null | metav1.#Duration @go(Tasks,*metav1.Duration)

	// Finally sets the maximum allowed duration of this pipeline's finally
	finally?: null | metav1.#Duration @go(Finally,*metav1.Duration)
}

// PipelineRunSpecStatus defines the pipelinerun spec status the user can provide
#PipelineRunSpecStatus: string

// PipelineRunSpecStatusCancelled indicates that the user wants to cancel the task,
// if not already cancelled or terminated
#PipelineRunSpecStatusCancelled: "Cancelled"

// PipelineRunSpecStatusCancelledRunFinally indicates that the user wants to cancel the pipeline run,
// if not already cancelled or terminated, but ensure finally is run normally
#PipelineRunSpecStatusCancelledRunFinally: "CancelledRunFinally"

// PipelineRunSpecStatusStoppedRunFinally indicates that the user wants to stop the pipeline run,
// wait for already running tasks to be completed and run finally
// if not already cancelled or terminated
#PipelineRunSpecStatusStoppedRunFinally: "StoppedRunFinally"

// PipelineRunSpecStatusPending indicates that the user wants to postpone starting a PipelineRun
// until some condition is met
#PipelineRunSpecStatusPending: "PipelineRunPending"

// PipelineRunStatus defines the observed state of PipelineRun
#PipelineRunStatus: {
	duckv1.#Status

	#PipelineRunStatusFields
}

// PipelineRunReason represents a reason for the pipeline run "Succeeded" condition
#PipelineRunReason: string // #enumPipelineRunReason

#enumPipelineRunReason:
	#PipelineRunReasonStarted |
	#PipelineRunReasonRunning |
	#PipelineRunReasonSuccessful |
	#PipelineRunReasonCompleted |
	#PipelineRunReasonFailed |
	#PipelineRunReasonCancelled |
	#PipelineRunReasonPending |
	#PipelineRunReasonTimedOut |
	#PipelineRunReasonStopping |
	#PipelineRunReasonCancelledRunningFinally |
	#PipelineRunReasonStoppedRunningFinally |
	#PipelineRunReasonCouldntGetPipeline |
	#PipelineRunReasonInvalidBindings |
	#PipelineRunReasonInvalidWorkspaceBinding |
	#PipelineRunReasonInvalidTaskRunSpec |
	#PipelineRunReasonParameterTypeMismatch |
	#PipelineRunReasonObjectParameterMissKeys |
	#PipelineRunReasonParamArrayIndexingInvalid |
	#PipelineRunReasonCouldntGetTask |
	#PipelineRunReasonParameterMissing |
	#PipelineRunReasonFailedValidation |
	#PipelineRunReasonCouldntGetPipelineResult |
	#PipelineRunReasonInvalidGraph |
	#PipelineRunReasonCouldntCancel |
	#PipelineRunReasonCouldntTimeOut |
	#PipelineRunReasonInvalidMatrixParameterTypes |
	#PipelineRunReasonInvalidTaskResultReference |
	#PipelineRunReasonInvalidPipelineResultReference |
	#PipelineRunReasonRequiredWorkspaceMarkedOptional |
	#PipelineRunReasonResolvingPipelineRef |
	#PipelineRunReasonResourceVerificationFailed |
	#PipelineRunReasonCreateRunFailed |
	#PipelineRunReasonCELEvaluationFailed |
	#PipelineRunReasonInvalidParamValue

// PipelineRunReasonStarted is the reason set when the PipelineRun has just started
#PipelineRunReasonStarted: #PipelineRunReason & "Started"

// PipelineRunReasonRunning is the reason set when the PipelineRun is running
#PipelineRunReasonRunning: #PipelineRunReason & "Running"

// PipelineRunReasonSuccessful is the reason set when the PipelineRun completed successfully
#PipelineRunReasonSuccessful: #PipelineRunReason & "Succeeded"

// PipelineRunReasonCompleted is the reason set when the PipelineRun completed successfully with one or more skipped Tasks
#PipelineRunReasonCompleted: #PipelineRunReason & "Completed"

// PipelineRunReasonFailed is the reason set when the PipelineRun completed with a failure
#PipelineRunReasonFailed: #PipelineRunReason & "Failed"

// PipelineRunReasonCancelled is the reason set when the PipelineRun cancelled by the user
// This reason may be found with a corev1.ConditionFalse status, if the cancellation was processed successfully
// This reason may be found with a corev1.ConditionUnknown status, if the cancellation is being processed or failed
#PipelineRunReasonCancelled: #PipelineRunReason & "Cancelled"

// PipelineRunReasonPending is the reason set when the PipelineRun is in the pending state
#PipelineRunReasonPending: #PipelineRunReason & "PipelineRunPending"

// PipelineRunReasonTimedOut is the reason set when the PipelineRun has timed out
#PipelineRunReasonTimedOut: #PipelineRunReason & "PipelineRunTimeout"

// PipelineRunReasonStopping indicates that no new Tasks will be scheduled by the controller, and the
// pipeline will stop once all running tasks complete their work
#PipelineRunReasonStopping: #PipelineRunReason & "PipelineRunStopping"

// PipelineRunReasonCancelledRunningFinally indicates that pipeline has been gracefully cancelled
// and no new Tasks will be scheduled by the controller, but final tasks are now running
#PipelineRunReasonCancelledRunningFinally: #PipelineRunReason & "CancelledRunningFinally"

// PipelineRunReasonStoppedRunningFinally indicates that pipeline has been gracefully stopped
// and no new Tasks will be scheduled by the controller, but final tasks are now running
#PipelineRunReasonStoppedRunningFinally: #PipelineRunReason & "StoppedRunningFinally"

// ReasonCouldntGetPipeline indicates that the reason for the failure status is that the
// associated Pipeline couldn't be retrieved
#PipelineRunReasonCouldntGetPipeline: #PipelineRunReason & "CouldntGetPipeline"

// ReasonInvalidBindings indicates that the reason for the failure status is that the
// PipelineResources bound in the PipelineRun didn't match those declared in the Pipeline
#PipelineRunReasonInvalidBindings: #PipelineRunReason & "InvalidPipelineResourceBindings"

// ReasonInvalidWorkspaceBinding indicates that a Pipeline expects a workspace but a
// PipelineRun has provided an invalid binding.
#PipelineRunReasonInvalidWorkspaceBinding: #PipelineRunReason & "InvalidWorkspaceBindings"

// ReasonInvalidTaskRunSpec indicates that PipelineRun.Spec.TaskRunSpecs[].PipelineTaskName is defined with
// a not exist taskName in pipelineSpec.
#PipelineRunReasonInvalidTaskRunSpec: #PipelineRunReason & "InvalidTaskRunSpecs"

// ReasonParameterTypeMismatch indicates that the reason for the failure status is that
// parameter(s) declared in the PipelineRun do not have the some declared type as the
// parameters(s) declared in the Pipeline that they are supposed to override.
#PipelineRunReasonParameterTypeMismatch: #PipelineRunReason & "ParameterTypeMismatch"

// ReasonObjectParameterMissKeys indicates that the object param value provided from PipelineRun spec
// misses some keys required for the object param declared in Pipeline spec.
#PipelineRunReasonObjectParameterMissKeys: #PipelineRunReason & "ObjectParameterMissKeys"

// ReasonParamArrayIndexingInvalid indicates that the use of param array indexing is out of bound.
#PipelineRunReasonParamArrayIndexingInvalid: #PipelineRunReason & "ParamArrayIndexingInvalid"

// ReasonCouldntGetTask indicates that the reason for the failure status is that the
// associated Pipeline's Tasks couldn't all be retrieved
#PipelineRunReasonCouldntGetTask: #PipelineRunReason & "CouldntGetTask"

// ReasonParameterMissing indicates that the reason for the failure status is that the
// associated PipelineRun didn't provide all the required parameters
#PipelineRunReasonParameterMissing: #PipelineRunReason & "ParameterMissing"

// ReasonFailedValidation indicates that the reason for failure status is
// that pipelinerun failed runtime validation
#PipelineRunReasonFailedValidation: #PipelineRunReason & "PipelineValidationFailed"

// PipelineRunReasonCouldntGetPipelineResult indicates that the pipeline fails to retrieve the
// referenced result. This could be due to failed TaskRuns or Runs that were supposed to produce
// the results
#PipelineRunReasonCouldntGetPipelineResult: #PipelineRunReason & "CouldntGetPipelineResult"

// ReasonInvalidGraph indicates that the reason for the failure status is that the
// associated Pipeline is an invalid graph (a.k.a wrong order, cycle, …)
#PipelineRunReasonInvalidGraph: #PipelineRunReason & "PipelineInvalidGraph"

// ReasonCouldntCancel indicates that a PipelineRun was cancelled but attempting to update
// all of the running TaskRuns as cancelled failed.
#PipelineRunReasonCouldntCancel: #PipelineRunReason & "PipelineRunCouldntCancel"

// ReasonCouldntTimeOut indicates that a PipelineRun was timed out but attempting to update
// all of the running TaskRuns as timed out failed.
#PipelineRunReasonCouldntTimeOut: #PipelineRunReason & "PipelineRunCouldntTimeOut"

// ReasonInvalidMatrixParameterTypes indicates a matrix contains invalid parameter types
#PipelineRunReasonInvalidMatrixParameterTypes: #PipelineRunReason & "InvalidMatrixParameterTypes"

// ReasonInvalidTaskResultReference indicates a task result was declared
// but was not initialized by that task
#PipelineRunReasonInvalidTaskResultReference: #PipelineRunReason & "InvalidTaskResultReference"

// PipelineRunReasonInvalidPipelineResultReference indicates a pipeline result was declared
// by the pipeline but not initialized in the pipelineTask
#PipelineRunReasonInvalidPipelineResultReference: #PipelineRunReason & "InvalidPipelineResultReference"

// ReasonRequiredWorkspaceMarkedOptional indicates an optional workspace
// has been passed to a Task that is expecting a non-optional workspace
#PipelineRunReasonRequiredWorkspaceMarkedOptional: #PipelineRunReason & "RequiredWorkspaceMarkedOptional"

// ReasonResolvingPipelineRef indicates that the PipelineRun is waiting for
// its pipelineRef to be asynchronously resolved.
#PipelineRunReasonResolvingPipelineRef: #PipelineRunReason & "ResolvingPipelineRef"

// ReasonResourceVerificationFailed indicates that the pipeline fails the trusted resource verification,
// it could be the content has changed, signature is invalid or public key is invalid
#PipelineRunReasonResourceVerificationFailed: #PipelineRunReason & "ResourceVerificationFailed"

// ReasonCreateRunFailed indicates that the pipeline fails to create the taskrun or other run resources
#PipelineRunReasonCreateRunFailed: #PipelineRunReason & "CreateRunFailed"

// ReasonCELEvaluationFailed indicates the pipeline fails the CEL evaluation
#PipelineRunReasonCELEvaluationFailed: #PipelineRunReason & "CELEvaluationFailed"

// PipelineRunReasonInvalidParamValue indicates that the PipelineRun Param input value is not allowed.
#PipelineRunReasonInvalidParamValue: #PipelineRunReason & "InvalidParamValue"

#PipelineTaskOnErrorAnnotation: "pipeline.tekton.dev/pipeline-task-on-error"

// ChildStatusReference is used to point to the statuses of individual TaskRuns and Runs within this PipelineRun.
#ChildStatusReference: {
	runtime.#TypeMeta

	// Name is the name of the TaskRun or Run this is referencing.
	name?: string @go(Name)

	// DisplayName is a user-facing name of the pipelineTask that may be
	// used to populate a UI.
	displayName?: string @go(DisplayName)

	// PipelineTaskName is the name of the PipelineTask this is referencing.
	pipelineTaskName?: string @go(PipelineTaskName)

	// WhenExpressions is the list of checks guarding the execution of the PipelineTask
	// +optional
	// +listType=atomic
	whenExpressions?: [...#WhenExpression] @go(WhenExpressions,[]WhenExpression)
}

// PipelineRunStatusFields holds the fields of PipelineRunStatus' status.
// This is defined separately and inlined so that other types can readily
// consume these fields via duck typing.
#PipelineRunStatusFields: {
	// StartTime is the time the PipelineRun is actually started.
	startTime?: null | metav1.#Time @go(StartTime,*metav1.Time)

	// CompletionTime is the time the PipelineRun completed.
	completionTime?: null | metav1.#Time @go(CompletionTime,*metav1.Time)

	// Results are the list of results written out by the pipeline task's containers
	// +optional
	// +listType=atomic
	results?: [...#PipelineRunResult] @go(Results,[]PipelineRunResult)

	// PipelineRunSpec contains the exact spec used to instantiate the run
	pipelineSpec?: null | #PipelineSpec @go(PipelineSpec,*PipelineSpec)

	// list of tasks that were skipped due to when expressions evaluating to false
	// +optional
	// +listType=atomic
	skippedTasks?: [...#SkippedTask] @go(SkippedTasks,[]SkippedTask)

	// list of TaskRun and Run names, PipelineTask names, and API versions/kinds for children of this PipelineRun.
	// +optional
	// +listType=atomic
	childReferences?: [...#ChildStatusReference] @go(ChildReferences,[]ChildStatusReference)

	// FinallyStartTime is when all non-finally tasks have been completed and only finally tasks are being executed.
	// +optional
	finallyStartTime?: null | metav1.#Time @go(FinallyStartTime,*metav1.Time)

	// Provenance contains some key authenticated metadata about how a software artifact was built (what sources, what inputs/outputs, etc.).
	// +optional
	provenance?: null | #Provenance @go(Provenance,*Provenance)

	// SpanContext contains tracing span context fields
	spanContext?: {[string]: string} @go(SpanContext,map[string]string)
}

// SkippedTask is used to describe the Tasks that were skipped due to their When Expressions
// evaluating to False. This is a struct because we are looking into including more details
// about the When Expressions that caused this Task to be skipped.
#SkippedTask: {
	// Name is the Pipeline Task name
	name: string @go(Name)

	// Reason is the cause of the PipelineTask being skipped.
	reason: #SkippingReason @go(Reason)

	// WhenExpressions is the list of checks guarding the execution of the PipelineTask
	// +optional
	// +listType=atomic
	whenExpressions?: [...#WhenExpression] @go(WhenExpressions,[]WhenExpression)
}

// SkippingReason explains why a PipelineTask was skipped.
#SkippingReason: string // #enumSkippingReason

#enumSkippingReason:
	#WhenExpressionsSkip |
	#ParentTasksSkip |
	#StoppingSkip |
	#GracefullyCancelledSkip |
	#GracefullyStoppedSkip |
	#MissingResultsSkip |
	#PipelineTimedOutSkip |
	#TasksTimedOutSkip |
	#FinallyTimedOutSkip |
	#EmptyArrayInMatrixParams |
	#None

// WhenExpressionsSkip means the task was skipped due to at least one of its when expressions evaluating to false
#WhenExpressionsSkip: #SkippingReason & "When Expressions evaluated to false"

// ParentTasksSkip means the task was skipped because its parent was skipped
#ParentTasksSkip: #SkippingReason & "Parent Tasks were skipped"

// StoppingSkip means the task was skipped because the pipeline run is stopping
#StoppingSkip: #SkippingReason & "PipelineRun was stopping"

// GracefullyCancelledSkip means the task was skipped because the pipeline run has been gracefully cancelled
#GracefullyCancelledSkip: #SkippingReason & "PipelineRun was gracefully cancelled"

// GracefullyStoppedSkip means the task was skipped because the pipeline run has been gracefully stopped
#GracefullyStoppedSkip: #SkippingReason & "PipelineRun was gracefully stopped"

// MissingResultsSkip means the task was skipped because it's missing necessary results
#MissingResultsSkip: #SkippingReason & "Results were missing"

// PipelineTimedOutSkip means the task was skipped because the PipelineRun has passed its overall timeout.
#PipelineTimedOutSkip: #SkippingReason & "PipelineRun timeout has been reached"

// TasksTimedOutSkip means the task was skipped because the PipelineRun has passed its Timeouts.Tasks.
#TasksTimedOutSkip: #SkippingReason & "PipelineRun Tasks timeout has been reached"

// FinallyTimedOutSkip means the task was skipped because the PipelineRun has passed its Timeouts.Finally.
#FinallyTimedOutSkip: #SkippingReason & "PipelineRun Finally timeout has been reached"

// EmptyArrayInMatrixParams means the task was skipped because Matrix parameters contain empty array.
#EmptyArrayInMatrixParams: #SkippingReason & "Matrix Parameters have an empty array"

// None means the task was not skipped
#None: #SkippingReason & "None"

// PipelineRunResult used to describe the results of a pipeline
#PipelineRunResult: {
	// Name is the result's name as declared by the Pipeline
	name: string @go(Name)

	// Value is the result returned from the execution of this PipelineRun
	value: #ParamValue @go(Value,ResultValue)
}

// PipelineRunTaskRunStatus contains the name of the PipelineTask for this TaskRun and the TaskRun's Status
#PipelineRunTaskRunStatus: {
	// PipelineTaskName is the name of the PipelineTask.
	pipelineTaskName?: string @go(PipelineTaskName)

	// Status is the TaskRunStatus for the corresponding TaskRun
	// +optional
	status?: null | #TaskRunStatus @go(Status,*TaskRunStatus)

	// WhenExpressions is the list of checks guarding the execution of the PipelineTask
	// +optional
	// +listType=atomic
	whenExpressions?: [...#WhenExpression] @go(WhenExpressions,[]WhenExpression)
}

// PipelineRunRunStatus contains the name of the PipelineTask for this Run and the Run's Status
#PipelineRunRunStatus: {
	// PipelineTaskName is the name of the PipelineTask.
	pipelineTaskName?: string @go(PipelineTaskName)

	// Status is the RunStatus for the corresponding Run
	// +optional
	status?: null | runv1beta1.#CustomRunStatus @go(Status,*runv1beta1.CustomRunStatus)

	// WhenExpressions is the list of checks guarding the execution of the PipelineTask
	// +optional
	// +listType=atomic
	whenExpressions?: [...#WhenExpression] @go(WhenExpressions,[]WhenExpression)
}

// PipelineRunList contains a list of PipelineRun
#PipelineRunList: {
	metav1.#TypeMeta

	// +optional
	metadata?: metav1.#ListMeta @go(ListMeta)
	items?: [...#PipelineRun] @go(Items,[]PipelineRun)
}

// PipelineTaskRun reports the results of running a step in the Task. Each
// task has the potential to succeed or fail (based on the exit code)
// and produces logs.
#PipelineTaskRun: {
	name?: string @go(Name)
}

// PipelineTaskRunSpec  can be used to configure specific
// specs for a concrete Task
#PipelineTaskRunSpec: {
	pipelineTaskName?:   string               @go(PipelineTaskName)
	serviceAccountName?: string               @go(ServiceAccountName)
	podTemplate?:        null | pod.#Template @go(PodTemplate,*pod.PodTemplate)

	// +listType=atomic
	stepSpecs?: [...#TaskRunStepSpec] @go(StepSpecs,[]TaskRunStepSpec)

	// +listType=atomic
	sidecarSpecs?: [...#TaskRunSidecarSpec] @go(SidecarSpecs,[]TaskRunSidecarSpec)

	// +optional
	metadata?: null | #PipelineTaskMetadata @go(Metadata,*PipelineTaskMetadata)

	// Compute resources to use for this TaskRun
	computeResources?: null | corev1.#ResourceRequirements @go(ComputeResources,*corev1.ResourceRequirements)
}

// PipelineTaskRunTemplate is used to specify run specifications for all Task in pipelinerun.
#PipelineTaskRunTemplate: {
	// +optional
	podTemplate?: null | pod.#Template @go(PodTemplate,*pod.PodTemplate)

	// +optional
	serviceAccountName?: string @go(ServiceAccountName)
}
