// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/tektoncd/pipeline/pkg/apis/pipeline/v1beta1

package v1beta1

import "github.com/tektoncd/pipeline/pkg/apis/config"

// Provenance contains metadata about resources used in the TaskRun/PipelineRun
// such as the source from where a remote build definition was fetched.
// This field aims to carry minimum amoumt of metadata in *Run status so that
// Tekton Chains can capture them in the provenance.
#Provenance: {
	// Deprecated: Use RefSource instead
	configSource?: null | #ConfigSource @go(ConfigSource,*ConfigSource)

	// RefSource identifies the source where a remote task/pipeline came from.
	refSource?: null | #RefSource @go(RefSource,*RefSource)

	// FeatureFlags identifies the feature flags that were used during the task/pipeline run
	featureFlags?: null | config.#FeatureFlags @go(FeatureFlags,*config.FeatureFlags)
}

// RefSource contains the information that can uniquely identify where a remote
// built definition came from i.e. Git repositories, Tekton Bundles in OCI registry
// and hub.
#RefSource: {
	// URI indicates the identity of the source of the build definition.
	// Example: "https://github.com/tektoncd/catalog"
	uri?: string @go(URI)

	// Digest is a collection of cryptographic digests for the contents of the artifact specified by URI.
	// Example: {"sha1": "f99d13e554ffcb696dee719fa85b695cb5b0f428"}
	digest?: {[string]: string} @go(Digest,map[string]string)

	// EntryPoint identifies the entry point into the build. This is often a path to a
	// build definition file and/or a target label within that file.
	// Example: "task/git-clone/0.8/git-clone.yaml"
	entryPoint?: string @go(EntryPoint)
}

// ConfigSource contains the information that can uniquely identify where a remote
// built definition came from i.e. Git repositories, Tekton Bundles in OCI registry
// and hub.
#ConfigSource: {
	// URI indicates the identity of the source of the build definition.
	// Example: "https://github.com/tektoncd/catalog"
	uri?: string @go(URI)

	// Digest is a collection of cryptographic digests for the contents of the artifact specified by URI.
	// Example: {"sha1": "f99d13e554ffcb696dee719fa85b695cb5b0f428"}
	digest?: {[string]: string} @go(Digest,map[string]string)

	// EntryPoint identifies the entry point into the build. This is often a path to a
	// build definition file and/or a target label within that file.
	// Example: "task/git-clone/0.8/git-clone.yaml"
	entryPoint?: string @go(EntryPoint)
}
