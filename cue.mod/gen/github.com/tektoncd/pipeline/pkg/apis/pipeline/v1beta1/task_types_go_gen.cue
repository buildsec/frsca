// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/tektoncd/pipeline/pkg/apis/pipeline/v1beta1

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	corev1 "k8s.io/api/core/v1"
)

// TaskRunResultType default task run result value
#TaskRunResultType: #ResultType & 1

// PipelineResourceResultType default pipeline result value
#PipelineResourceResultType: 2

// InternalTektonResultType default internal tekton result value
#InternalTektonResultType: 3

// UnknownResultType default unknown result type value
#UnknownResultType: 10

// Task represents a collection of sequential steps that are run as part of a
// Pipeline using a set of inputs and producing a set of outputs. Tasks execute
// when TaskRuns are created that provide the input parameters and resources and
// output resources the Task requires.
//
// +k8s:openapi-gen=true
#Task: {
	metav1.#TypeMeta

	// +optional
	metadata: metav1.#ObjectMeta @go(ObjectMeta)

	// Spec holds the desired state of the Task from the client
	// +optional
	spec: #TaskSpec @go(Spec)
}

// TaskSpec defines the desired state of Task.
#TaskSpec: {
	// Resources is a list input and output resource to run the task
	// Resources are represented in TaskRuns as bindings to instances of
	// PipelineResources.
	// +optional
	resources?: null | #TaskResources @go(Resources,*TaskResources)

	// Params is a list of input parameters required to run the task. Params
	// must be supplied as inputs in TaskRuns unless they declare a default
	// value.
	// +optional
	params?: [...#ParamSpec] @go(Params,[]ParamSpec)

	// Description is a user-facing description of the task that may be
	// used to populate a UI.
	// +optional
	description?: string @go(Description)

	// Steps are the steps of the build; each step is run sequentially with the
	// source mounted into /workspace.
	steps?: [...#Step] @go(Steps,[]Step)

	// Volumes is a collection of volumes that are available to mount into the
	// steps of the build.
	volumes?: [...corev1.#Volume] @go(Volumes,[]corev1.Volume)

	// StepTemplate can be used as the basis for all step containers within the
	// Task, so that the steps inherit settings on the base container.
	stepTemplate?: null | corev1.#Container @go(StepTemplate,*corev1.Container)

	// Sidecars are run alongside the Task's step containers. They begin before
	// the steps start and end after the steps complete.
	sidecars?: [...#Sidecar] @go(Sidecars,[]Sidecar)

	// Workspaces are the volumes that this Task requires.
	workspaces?: [...#WorkspaceDeclaration] @go(Workspaces,[]WorkspaceDeclaration)

	// Results are values that this Task can output
	results?: [...#TaskResult] @go(Results,[]TaskResult)
}

// TaskResult used to describe the results of a task
#TaskResult: {
	// Name the given name
	name: string @go(Name)

	// Description is a human-readable description of the result
	// +optional
	description: string @go(Description)
}

// Step embeds the Container type, which allows it to include fields not
// provided by Container.
#Step: {
	corev1.#Container

	// Script is the contents of an executable file to execute.
	//
	// If Script is not empty, the Step cannot have an Command and the Args will be passed to the Script.
	// +optional
	script?: string @go(Script)

	// Timeout is the time after which the step times out. Defaults to never.
	// Refer to Go's ParseDuration documentation for expected format: https://golang.org/pkg/time/#ParseDuration
	// +optional
	timeout?: null | metav1.#Duration @go(Timeout,*metav1.Duration)

	// This is an alpha field. You must set the "enable-api-fields" feature flag to "alpha"
	// for this field to be supported.
	//
	// Workspaces is a list of workspaces from the Task that this Step wants
	// exclusive access to. Adding a workspace to this list means that any
	// other Step or Sidecar that does not also request this Workspace will
	// not have access to it.
	// +optional
	workspaces?: [...#WorkspaceUsage] @go(Workspaces,[]WorkspaceUsage)

	// OnError defines the exiting behavior of a container on error
	// can be set to [ continue | stopAndFail ]
	// stopAndFail indicates exit the taskRun if the container exits with non-zero exit code
	// continue indicates continue executing the rest of the steps irrespective of the container exit code
	onError?: string @go(OnError)
}

// Sidecar has nearly the same data structure as Step, consisting of a Container and an optional Script, but does not have the ability to timeout.
#Sidecar: {
	corev1.#Container

	// Script is the contents of an executable file to execute.
	//
	// If Script is not empty, the Step cannot have an Command or Args.
	// +optional
	script?: string @go(Script)

	// This is an alpha field. You must set the "enable-api-fields" feature flag to "alpha"
	// for this field to be supported.
	//
	// Workspaces is a list of workspaces from the Task that this Sidecar wants
	// exclusive access to. Adding a workspace to this list means that any
	// other Step or Sidecar that does not also request this Workspace will
	// not have access to it.
	// +optional
	workspaces?: [...#WorkspaceUsage] @go(Workspaces,[]WorkspaceUsage)
}

// TaskList contains a list of Task
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
#TaskList: {
	metav1.#TypeMeta

	// +optional
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#Task] @go(Items,[]Task)
}

// TaskRef can be used to refer to a specific instance of a task.
// Copied from CrossVersionObjectReference: https://github.com/kubernetes/kubernetes/blob/169df7434155cbbc22f1532cba8e0a9588e29ad8/pkg/apis/autoscaling/types.go#L64
#TaskRef: {
	// Name of the referent; More info: http://kubernetes.io/docs/user-guide/identifiers#names
	name?: string @go(Name)

	// TaskKind indicates the kind of the task, namespaced or cluster scoped.
	kind?: #TaskKind @go(Kind)

	// API version of the referent
	// +optional
	apiVersion?: string @go(APIVersion)

	// Bundle url reference to a Tekton Bundle.
	// +optional
	bundle?: string @go(Bundle)
}

// TaskKind defines the type of Task used by the pipeline.
#TaskKind: string // #enumTaskKind

#enumTaskKind:
	#NamespacedTaskKind |
	#ClusterTaskKind

// NamespacedTaskKind indicates that the task type has a namespaced scope.
#NamespacedTaskKind: #TaskKind & "Task"

// ClusterTaskKind indicates that task type has a cluster scope.
#ClusterTaskKind: #TaskKind & "ClusterTask"
