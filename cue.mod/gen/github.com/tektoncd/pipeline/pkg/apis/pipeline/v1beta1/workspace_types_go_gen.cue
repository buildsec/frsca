// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/tektoncd/pipeline/pkg/apis/pipeline/v1beta1

package v1beta1

import corev1 "k8s.io/api/core/v1"

// WorkspaceDeclaration is a declaration of a volume that a Task requires.
#WorkspaceDeclaration: {
	// Name is the name by which you can bind the volume at runtime.
	name: string @go(Name)

	// Description is an optional human readable description of this volume.
	// +optional
	description?: string @go(Description)

	// MountPath overrides the directory that the volume will be made available at.
	// +optional
	mountPath?: string @go(MountPath)

	// ReadOnly dictates whether a mounted volume is writable. By default this
	// field is false and so mounted volumes are writable.
	readOnly?: bool @go(ReadOnly)

	// Optional marks a Workspace as not being required in TaskRuns. By default
	// this field is false and so declared workspaces are required.
	optional?: bool @go(Optional)
}

// WorkspaceBinding maps a Task's declared workspace to a Volume.
#WorkspaceBinding: {
	// Name is the name of the workspace populated by the volume.
	name: string @go(Name)

	// SubPath is optionally a directory on the volume which should be used
	// for this binding (i.e. the volume will be mounted at this sub directory).
	// +optional
	subPath?: string @go(SubPath)

	// VolumeClaimTemplate is a template for a claim that will be created in the same namespace.
	// The PipelineRun controller is responsible for creating a unique claim for each instance of PipelineRun.
	// +optional
	volumeClaimTemplate?: null | corev1.#PersistentVolumeClaim @go(VolumeClaimTemplate,*corev1.PersistentVolumeClaim)

	// PersistentVolumeClaimVolumeSource represents a reference to a
	// PersistentVolumeClaim in the same namespace. Either this OR EmptyDir can be used.
	// +optional
	persistentVolumeClaim?: null | corev1.#PersistentVolumeClaimVolumeSource @go(PersistentVolumeClaim,*corev1.PersistentVolumeClaimVolumeSource)

	// EmptyDir represents a temporary directory that shares a Task's lifetime.
	// More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
	// Either this OR PersistentVolumeClaim can be used.
	// +optional
	emptyDir?: null | corev1.#EmptyDirVolumeSource @go(EmptyDir,*corev1.EmptyDirVolumeSource)

	// ConfigMap represents a configMap that should populate this workspace.
	// +optional
	configMap?: null | corev1.#ConfigMapVolumeSource @go(ConfigMap,*corev1.ConfigMapVolumeSource)

	// Secret represents a secret that should populate this workspace.
	// +optional
	secret?: null | corev1.#SecretVolumeSource @go(Secret,*corev1.SecretVolumeSource)

	// Projected represents a projected volume that should populate this workspace.
	// +optional
	projected?: null | corev1.#ProjectedVolumeSource @go(Projected,*corev1.ProjectedVolumeSource)

	// CSI (Container Storage Interface) represents ephemeral storage that is handled by certain external CSI drivers.
	// +optional
	csi?: null | corev1.#CSIVolumeSource @go(CSI,*corev1.CSIVolumeSource)
}

// WorkspacePipelineDeclaration creates a named slot in a Pipeline that a PipelineRun
// is expected to populate with a workspace binding.
// Deprecated: use PipelineWorkspaceDeclaration type instead
#WorkspacePipelineDeclaration: #PipelineWorkspaceDeclaration

// PipelineWorkspaceDeclaration creates a named slot in a Pipeline that a PipelineRun
// is expected to populate with a workspace binding.
#PipelineWorkspaceDeclaration: {
	// Name is the name of a workspace to be provided by a PipelineRun.
	name: string @go(Name)

	// Description is a human readable string describing how the workspace will be
	// used in the Pipeline. It can be useful to include a bit of detail about which
	// tasks are intended to have access to the data on the workspace.
	// +optional
	description?: string @go(Description)

	// Optional marks a Workspace as not being required in PipelineRuns. By default
	// this field is false and so declared workspaces are required.
	optional?: bool @go(Optional)
}

// WorkspacePipelineTaskBinding describes how a workspace passed into the pipeline should be
// mapped to a task's declared workspace.
#WorkspacePipelineTaskBinding: {
	// Name is the name of the workspace as declared by the task
	name: string @go(Name)

	// Workspace is the name of the workspace declared by the pipeline
	// +optional
	workspace?: string @go(Workspace)

	// SubPath is optionally a directory on the volume which should be used
	// for this binding (i.e. the volume will be mounted at this sub directory).
	// +optional
	subPath?: string @go(SubPath)
}

// WorkspaceUsage is used by a Step or Sidecar to declare that it wants isolated access
// to a Workspace defined in a Task.
#WorkspaceUsage: {
	// Name is the name of the workspace this Step or Sidecar wants access to.
	name: string @go(Name)

	// MountPath is the path that the workspace should be mounted to inside the Step or Sidecar,
	// overriding any MountPath specified in the Task's WorkspaceDeclaration.
	mountPath: string @go(MountPath)
}
