// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/tektoncd/triggers/pkg/apis/triggers/v1beta1

package v1beta1

import "google.golang.org/grpc/codes"

#InterceptorInterface: _

// Do not generate DeepCopy(). See #827
// +k8s:deepcopy-gen=false
#InterceptorRequest: {
	// Body is the incoming HTTP event body. We use a "string" representation of the JSON body
	// in order to preserve the body exactly as it was sent (including spaces etc.). This is necessary
	// for some interceptors e.g. GitHub for validating the body with a signature. While []byte can also
	// store an exact representation of the body, `json.Marshal` will compact []byte to a base64 encoded
	// string which means that we will lose the spaces any time we marshal this struct.
	body?: string @go(Body)

	// Header are the headers for the incoming HTTP event
	header?: {[string]: [...string]} @go(Header,map[string][]string)

	// Extensions are extra values that are added by previous interceptors in a chain
	extensions?: {...} @go(Extensions,map[string]interface{})

	// InterceptorParams are the user specified params for interceptor in the Trigger
	interceptor_params?: {...} @go(InterceptorParams,map[string]interface{})

	// Context contains additional metadata about the event being processed
	context?: null | #TriggerContext @go(Context,*TriggerContext)
}

#TriggerContext: {
	// EventURL is the URL of the incoming event
	event_url?: string @go(EventURL)

	// EventID is a unique ID assigned by Triggers to each event
	event_id?: string @go(EventID)

	// TriggerID is of the form namespace/$ns/triggers/$name
	trigger_id?: string @go(TriggerID)
}

// Do not generate Deepcopy(). See #827
// +k8s:deepcopy-gen=false
#InterceptorResponse: {
	// Extensions are additional fields that is added to the interceptor event.
	extensions?: {...} @go(Extensions,map[string]interface{})

	// Continue indicates if the EventListener should continue processing the Trigger or not
	continue: bool @go(Continue)

	// Status is an Error status containing details on any interceptor processing errors
	status: #Status @go(Status)
}

#Status: {
	// The status code, which should be an enum value of [google.rpc.Code][google.rpc.Code].
	code?: codes.#Code @go(Code)

	// A developer-facing error message, which should be in English.
	message?: string @go(Message)
}
