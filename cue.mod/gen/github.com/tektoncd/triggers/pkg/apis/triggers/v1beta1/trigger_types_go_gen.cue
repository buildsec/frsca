// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/tektoncd/triggers/pkg/apis/triggers/v1beta1

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	apiextensionsv1 "k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1"
	corev1 "k8s.io/api/core/v1"
	"knative.dev/pkg/apis"
	"github.com/tektoncd/pipeline/pkg/apis/pipeline/v1beta1"
)

// TriggerSpec represents a connection between TriggerSpecBinding,
// and TriggerSpecTemplate; TriggerSpecBinding provides extracted values for
// TriggerSpecTemplate to then create resources from.
#TriggerSpec: {
	// +listType=atomic
	bindings: [...null | #TriggerSpecBinding] @go(Bindings,[]*TriggerSpecBinding)
	template: #TriggerSpecTemplate @go(Template)

	// +optional
	name?: string @go(Name)

	// +listType=atomic
	interceptors?: [...null | #TriggerInterceptor] @go(Interceptors,[]*TriggerInterceptor)

	// ServiceAccountName optionally associates credentials with each trigger;
	// Unlike EventListeners, this should be scoped to the same namespace
	// as the Trigger itself
	// +optional
	serviceAccountName?: string @go(ServiceAccountName)
}

#TriggerSpecTemplate: {
	ref?:        null | string               @go(Ref,*string)
	apiversion?: string                      @go(APIVersion)
	spec?:       null | #TriggerTemplateSpec @go(Spec,*TriggerTemplateSpec)
}

#TriggerSpecBinding: {
	// Name is the name of the binding param
	// Mutually exclusive with Ref
	name?: string @go(Name)

	// Value is the value of the binding param. Can contain JSONPath
	// Has to be pointer since "" is a valid value
	// Required if Name is also specified.
	value?: null | string @go(Value,*string)

	// Ref is a reference to a TriggerBinding kind.
	// Mutually exclusive with Name
	ref?: string @go(Ref)

	// Kind can only be provided if Ref is also provided. Defaults to TriggerBinding
	kind?: #TriggerBindingKind @go(Kind)

	// APIVersion of the binding ref
	apiversion?: string @go(APIVersion)
}

// Trigger defines a mapping of an input event to parameters. This is used
// to extract information from events to be passed to TriggerTemplates within a
// Trigger.
// +k8s:openapi-gen=true
#Trigger: {
	metav1.#TypeMeta

	// +optional
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// Spec holds the desired state of the Trigger
	// +optional
	spec: #TriggerSpec @go(Spec)
}

// TriggerInterceptor provides a hook to intercept and pre-process events
#TriggerInterceptor: {
	// Optional name to identify the current interceptor configuration
	name?: null | string @go(Name,*string)

	// Ref refers to the Interceptor to use
	ref: #InterceptorRef @go(Ref)

	// Params are the params to send to the interceptor
	// +listType=atomic
	params?: [...#InterceptorParams] @go(Params,[]InterceptorParams)

	// WebhookInterceptor refers to an old style webhook interceptor service
	webhook?: null | #WebhookInterceptor @go(Webhook,*WebhookInterceptor)
}

// InterceptorParams defines a key-value pair that can be passed on an interceptor
#InterceptorParams: {
	name:  string                @go(Name)
	value: apiextensionsv1.#JSON @go(Value)
}

// InterceptorRef provides a Reference to a ClusterInterceptor
#InterceptorRef: {
	// Name of the referent; More info: http://kubernetes.io/docs/user-guide/identifiers#names
	name?: string @go(Name)

	// InterceptorKind indicates the kind of the Interceptor, namespaced or cluster scoped.
	// Currently only InterceptorKind is ClusterInterceptor, so the only valid value
	// is the default one
	// +optional
	kind?: #InterceptorKind @go(Kind)

	// API version of the referent
	// +optional
	apiVersion?: string @go(APIVersion)
}

// InterceptorKind defines the type of Interceptor used by the Trigger.
#InterceptorKind: string // #enumInterceptorKind

#enumInterceptorKind:
	#ClusterInterceptorKind

// ClusterTaskKind indicates that task type has a cluster scope.
#ClusterInterceptorKind: #InterceptorKind & "ClusterInterceptor"

// WebhookInterceptor provides a webhook to intercept and pre-process events
#WebhookInterceptor: {
	// ObjectRef is a reference to an object that will resolve to a cluster DNS
	// name to use as the EventInterceptor. Either objectRef or url can be specified
	// +optional
	objectRef?: null | corev1.#ObjectReference @go(ObjectRef,*corev1.ObjectReference)

	// +optional
	url?: null | apis.#URL @go(URL,*apis.URL)

	// Header is a group of key-value pairs that can be appended to the
	// interceptor request headers. This allows the interceptor to make
	// decisions specific to an EventListenerTrigger.
	// +listType=atomic
	header?: [...v1beta1.#Param] @go(Header,[]v1beta1.Param)
}

// BitbucketInterceptor provides a webhook to intercept and pre-process events
#BitbucketInterceptor: {
	secretRef?: null | #SecretRef @go(SecretRef,*SecretRef)

	// +listType=atomic
	eventTypes?: [...string] @go(EventTypes,[]string)
}

// GitHubInterceptor provides a webhook to intercept and pre-process events
#GitHubInterceptor: {
	secretRef?: null | #SecretRef @go(SecretRef,*SecretRef)

	// +listType=atomic
	eventTypes?: [...string] @go(EventTypes,[]string)
}

// GitLabInterceptor provides a webhook to intercept and pre-process events
#GitLabInterceptor: {
	secretRef?: null | #SecretRef @go(SecretRef,*SecretRef)

	// +listType=atomic
	eventTypes?: [...string] @go(EventTypes,[]string)
}

// CELInterceptor provides a webhook to intercept and pre-process events
#CELInterceptor: {
	filter?: string @go(Filter)

	// +listType=atomic
	overlays?: [...#CELOverlay] @go(Overlays,[]CELOverlay)
}

// CELOverlay provides a way to modify the request body using CEL expressions
#CELOverlay: {
	key?:        string @go(Key)
	expression?: string @go(Expression)
}

// TriggerList contains a list of Triggers.
// We don't use this but it's required for certain codegen features.
#TriggerList: {
	metav1.#TypeMeta

	// +optional
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#Trigger] @go(Items,[]Trigger)
}
