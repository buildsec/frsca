// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go k8s.io/apiextensions-apiserver/pkg/apis/apiextensions

package apiextensions

// JSONSchemaProps is a JSON-Schema following Specification Draft 4 (http://json-schema.org/).
#JSONSchemaProps: {
	ID:               string
	Schema:           #JSONSchemaURL
	Ref?:             null | string @go(,*string)
	Description:      string
	Type:             string
	Nullable:         bool
	Format:           string
	Title:            string
	Default?:         null | #JSON   @go(,*JSON)
	Maximum?:         null | float64 @go(,*float64)
	ExclusiveMaximum: bool
	Minimum?:         null | float64 @go(,*float64)
	ExclusiveMinimum: bool
	MaxLength?:       null | int64 @go(,*int64)
	MinLength?:       null | int64 @go(,*int64)
	Pattern:          string
	MaxItems?:        null | int64 @go(,*int64)
	MinItems?:        null | int64 @go(,*int64)
	UniqueItems:      bool
	MultipleOf?:      null | float64 @go(,*float64)
	Enum: [...#JSON] @go(,[]JSON)
	MaxProperties?: null | int64 @go(,*int64)
	MinProperties?: null | int64 @go(,*int64)
	Required: [...string] @go(,[]string)
	Items?: null | #JSONSchemaPropsOrArray @go(,*JSONSchemaPropsOrArray)
	AllOf: [...#JSONSchemaProps] @go(,[]JSONSchemaProps)
	OneOf: [...#JSONSchemaProps] @go(,[]JSONSchemaProps)
	AnyOf: [...#JSONSchemaProps] @go(,[]JSONSchemaProps)
	Not?: null | #JSONSchemaProps @go(,*JSONSchemaProps)
	Properties: {[string]: #JSONSchemaProps} @go(,map[string]JSONSchemaProps)
	AdditionalProperties?: null | #JSONSchemaPropsOrBool @go(,*JSONSchemaPropsOrBool)
	PatternProperties: {[string]: #JSONSchemaProps} @go(,map[string]JSONSchemaProps)
	Dependencies:     #JSONSchemaDependencies
	AdditionalItems?: null | #JSONSchemaPropsOrBool @go(,*JSONSchemaPropsOrBool)
	Definitions:      #JSONSchemaDefinitions
	ExternalDocs?:    null | #ExternalDocumentation @go(,*ExternalDocumentation)
	Example?:         null | #JSON                  @go(,*JSON)

	// x-kubernetes-preserve-unknown-fields stops the API server
	// decoding step from pruning fields which are not specified
	// in the validation schema. This affects fields recursively,
	// but switches back to normal pruning behaviour if nested
	// properties or additionalProperties are specified in the schema.
	// This can either be true or undefined. False is forbidden.
	XPreserveUnknownFields?: null | bool @go(,*bool)

	// x-kubernetes-embedded-resource defines that the value is an
	// embedded Kubernetes runtime.Object, with TypeMeta and
	// ObjectMeta. The type must be object. It is allowed to further
	// restrict the embedded object. Both ObjectMeta and TypeMeta
	// are validated automatically. x-kubernetes-preserve-unknown-fields
	// must be true.
	XEmbeddedResource: bool

	// x-kubernetes-int-or-string specifies that this value is
	// either an integer or a string. If this is true, an empty
	// type is allowed and type as child of anyOf is permitted
	// if following one of the following patterns:
	//
	// 1) anyOf:
	//    - type: integer
	//    - type: string
	// 2) allOf:
	//    - anyOf:
	//      - type: integer
	//      - type: string
	//    - ... zero or more
	XIntOrString: bool

	// x-kubernetes-list-map-keys annotates an array with the x-kubernetes-list-type `map` by specifying the keys used
	// as the index of the map.
	//
	// This tag MUST only be used on lists that have the "x-kubernetes-list-type"
	// extension set to "map". Also, the values specified for this attribute must
	// be a scalar typed field of the child structure (no nesting is supported).
	XListMapKeys: [...string] @go(,[]string)

	// x-kubernetes-list-type annotates an array to further describe its topology.
	// This extension must only be used on lists and may have 3 possible values:
	//
	// 1) `atomic`: the list is treated as a single entity, like a scalar.
	//      Atomic lists will be entirely replaced when updated. This extension
	//      may be used on any type of list (struct, scalar, ...).
	// 2) `set`:
	//      Sets are lists that must not have multiple items with the same value. Each
	//      value must be a scalar, an object with x-kubernetes-map-type `atomic` or an
	//      array with x-kubernetes-list-type `atomic`.
	// 3) `map`:
	//      These lists are like maps in that their elements have a non-index key
	//      used to identify them. Order is preserved upon merge. The map tag
	//      must only be used on a list with elements of type object.
	XListType?: null | string @go(,*string)

	// x-kubernetes-map-type annotates an object to further describe its topology.
	// This extension must only be used when type is object and may have 2 possible values:
	//
	// 1) `granular`:
	//      These maps are actual maps (key-value pairs) and each fields are independent
	//      from each other (they can each be manipulated by separate actors). This is
	//      the default behaviour for all maps.
	// 2) `atomic`: the list is treated as a single entity, like a scalar.
	//      Atomic maps will be entirely replaced when updated.
	// +optional
	XMapType?: null | string @go(,*string)
}

// JSON represents any valid JSON value.
// These types are supported: bool, int64, float64, string, []interface{}, map[string]interface{} and nil.
#JSON: _

// JSONSchemaURL represents a schema url.
#JSONSchemaURL: string

// JSONSchemaPropsOrArray represents a value that can either be a JSONSchemaProps
// or an array of JSONSchemaProps. Mainly here for serialization purposes.
#JSONSchemaPropsOrArray: {
	Schema?: null | #JSONSchemaProps @go(,*JSONSchemaProps)
	JSONSchemas: [...#JSONSchemaProps] @go(,[]JSONSchemaProps)
}

// JSONSchemaPropsOrBool represents JSONSchemaProps or a boolean value.
// Defaults to true for the boolean property.
#JSONSchemaPropsOrBool: {
	Allows:  bool
	Schema?: null | #JSONSchemaProps @go(,*JSONSchemaProps)
}

// JSONSchemaDependencies represent a dependencies property.
#JSONSchemaDependencies: {[string]: #JSONSchemaPropsOrStringArray}

// JSONSchemaPropsOrStringArray represents a JSONSchemaProps or a string array.
#JSONSchemaPropsOrStringArray: {
	Schema?: null | #JSONSchemaProps @go(,*JSONSchemaProps)
	Property: [...string] @go(,[]string)
}

// JSONSchemaDefinitions contains the models explicitly defined in this spec.
#JSONSchemaDefinitions: {[string]: #JSONSchemaProps}

// ExternalDocumentation allows referencing an external resource for extended documentation.
#ExternalDocumentation: {
	Description: string
	URL:         string
}
