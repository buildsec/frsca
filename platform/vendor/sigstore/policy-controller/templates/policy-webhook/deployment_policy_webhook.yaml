# Copyright 2022 The Sigstore Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "policy-controller.fullname" . }}-policy-webhook
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "policy-controller.labels" . | nindent 4 }}
    control-plane: {{ template "policy-controller.fullname" . }}-policy-webhook
spec:
  replicas: {{ .Values.policywebhook.replicaCount }}
  selector:
    matchLabels:
      {{- include "policy-controller.selectorLabels" . | nindent 6 }}
      control-plane: {{ template "policy-controller.fullname" . }}-policy-webhook
  template:
    metadata:
      labels:
        {{- include "policy-controller.selectorLabels" . | nindent 8 }}
        control-plane: {{ template "policy-controller.fullname" . }}-policy-webhook
    spec:
      nodeSelector:
        {{- toYaml .Values.commonNodeSelector | nindent 8 }}
      {{- if .Values.imagePullSecrets }}
      imagePullSecrets:
{{ toYaml .Values.imagePullSecrets | indent 8 }}
      {{- end }}         
      tolerations:
        {{- toYaml .Values.commonTolerations | nindent 8 }}
      serviceAccountName: {{ template "policy-controller.fullname" . }}-policy-webhook
      # To avoid node becoming SPOF, spread our replicas to different nodes.
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchLabels:
                  control-plane: {{ template "policy-controller.fullname" . }}-policy-webhook
              topologyKey: kubernetes.io/hostname
            weight: 100
      containers:
      - name: policy-webhook
        # This is the Go import path for the binary that is containerized
        # and substituted here.
        image: "{{ template "policy-controller.image" .Values.policywebhook.image }}"
        imagePullPolicy: "{{ .Values.policywebhook.image.pullPolicy }}"
        args:
        {{- if semverCompare ">= 1.8-0" .Chart.AppVersion }}
        - -mutating-webhook-name={{ required "A valid policywebhook.webhookNames.defaulting is required" .Values.policywebhook.webhookNames.defaulting }}
        - -validating-webhook-name={{ required "A valid policywebhook.webhookNames.validating is required" .Values.policywebhook.webhookNames.validating }}
        {{- end }}
        {{- range $key, $value := .Values.policywebhook.extraArgs }}
        - -{{ $key }}={{ $value }}
        {{- end }}
        resources:
        {{- with .Values.policywebhook.resources }}
          {{- toYaml . | nindent 10 }}
        {{- end }}
        env:
{{- if .Values.policywebhook.env }}
{{- range $key, $value := .Values.policywebhook.env }}
        - name: "{{ $key }}"
          value: "{{ $value }}"
{{- end }}
{{- end }}
        - name: SYSTEM_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: CONFIG_LOGGING_NAME
          value: {{ template "policy-controller.fullname" . }}-policy-webhook-logging
        - name: CONFIG_OBSERVABILITY_NAME
          value: {{ template "policy-controller.fullname" . }}-policy-webhook-observability
        - name: METRICS_DOMAIN
          value: sigstore.dev/policy
        - name: WEBHOOK_NAME
          value: policy-webhook
        ports:
        - containerPort: 8443
          name: https
          protocol: TCP
        - containerPort: 9090
          name: metrics
          protocol: TCP
{{- if .Values.policywebhook.podSecurityContext.enabled }}
        securityContext:
          {{- with .Values.policywebhook.podSecurityContext }}
          {{- omit . "enabled" | toYaml | nindent 10}}
          {{- end }}
{{- end }}
        volumeMounts:
          # Failing to provide a writable $HOME can cause TUF client initialization to panic
          - mountPath: /home/nonroot
            name: writable-home-dir
        readinessProbe:
          failureThreshold: 6
          initialDelaySeconds: 30
          periodSeconds: 1
          httpGet:
            scheme: HTTPS
            port: 8443
            httpHeaders:
            - name: k-kubelet-probe
              value: "policy-webhook"
        livenessProbe:
          failureThreshold: 6
          initialDelaySeconds: 30
          periodSeconds: 1
          httpGet:
            scheme: HTTPS
            port: 8443
            httpHeaders:
            - name: k-kubelet-probe
              value: "policy-webhook"
      # Our webhook should gracefully terminate by lame ducking first, set this to a sufficiently
      # high value that we respect whatever value it has configured for the lame duck grace period.
      terminationGracePeriodSeconds: 300

      {{- if .Values.policywebhook.securityContext.enabled }}
      securityContext:
        {{- with .Values.policywebhook.securityContext }}
        {{- omit . "enabled" | toYaml | nindent 8}}
        {{- end }}
      {{- end }}
      volumes:
      - emptyDir: {}
        name: writable-home-dir
